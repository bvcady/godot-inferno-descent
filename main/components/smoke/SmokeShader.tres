[gd_resource type="ShaderMaterial" load_steps=2 format=3 uid="uid://bmbb0i5p52ehq"]

[sub_resource type="Shader" id="Shader_c6c4h"]
code = "shader_type canvas_item;

uniform int pixel_size : hint_range(1, 100) = 2;

void fragment(){
	vec2 pos = UV / TEXTURE_PIXEL_SIZE;
	vec2 square = vec2(float(pixel_size), float(pixel_size));
	vec2 top_left = floor(pos / square) * square;
	vec4 total = vec4(0., 0., 0., 0.);
	for (int x = int(top_left.x); x < int(top_left.x) + pixel_size; x++){
		for (int y = int(top_left.y); y < int(top_left.y) + pixel_size; y++){
			total += texture(TEXTURE, vec2(float(x), float(y)) * TEXTURE_PIXEL_SIZE);
		}
	}
	
	COLOR = total / float(pixel_size * pixel_size);
	float maxed_a = 0.0;
	if (COLOR.a > 0.5) {
		maxed_a = 1.0;
	}
	
	COLOR = vec4(1.0, 1.0, 1.0, maxed_a);
}"

[resource]
shader = SubResource("Shader_c6c4h")
shader_parameter/pixel_size = 2
